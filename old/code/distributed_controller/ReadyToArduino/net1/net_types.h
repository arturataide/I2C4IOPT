/* Net simples_without_net - IOPT */
/* Automatic code generated by IOPT2C XSLT transformation. */


#ifndef __simples_without_net_DEFS
#define __simples_without_net_DEFS


#define TRACE_CONT_RUN       (-1)
#define TRACE_PAUSE          0
#define TRACE_SINGLE_STEP    1
#define TRACE_N_STEPS(n)     (n)

#define MODEL_NAME		simples_without_net
#define MODEL_NAME_STR		"simples_without_net"
#define MODEL_VERSION		"2017-01-25 22:26:45"
#define MODEL_N_INPUTS		2
#define MODEL_N_OUTPUTS		2
#define MODEL_N_PLACES		1
#define MODEL_N_TRANSITIONS	2

#ifdef __cplusplus
extern "C" {
#endif

extern int trace_control;

typedef struct {
    unsigned int p_2: 2; /* Place Place1 */
    unsigned int padding: 6;
} simples_without_net_NetMarking;


typedef struct {
    unsigned int net1 : 1;
    unsigned int net2 : 1;
} simples_without_net_InputSignals;


typedef struct {
    unsigned int net1E : 1;
    unsigned int net2E : 1;
    unsigned int event20 : 1;
} simples_without_net_InputSignalEvents;


typedef struct {
    unsigned int event19 : 1;
    unsigned int padding : 7;
} simples_without_net_OutputSignalEvents;


typedef struct {
    unsigned int led1 : 1;
} simples_without_net_PlaceOutputSignals;


typedef struct {
    unsigned int led2 : 1;
    unsigned int padding: 7;
} simples_without_net_EventOutputSignals;


typedef struct {
    unsigned int t_7 : 1; /* tr_7 */
    unsigned int t_9 : 1; /* tr_9 */
    unsigned int count: 8;
} simples_without_net_TransitionFiring;

/* Array declarations: */


/* Runtime text info: */
typedef struct {
#ifdef __cplusplus
    const
#endif
    char* name;
    int value;
} iopt_param_info;

extern iopt_param_info* get_simples_without_net_InputInfo();
extern iopt_param_info* get_simples_without_net_OutputInfo();
extern iopt_param_info* get_simples_without_net_MarkingInfo();
extern iopt_param_info* get_simples_without_net_TFiredInfo();
extern void force_simples_without_net_Inputs( iopt_param_info fv[], simples_without_net_InputSignals* in );
extern void force_simples_without_net_Outputs( iopt_param_info fv[], simples_without_net_PlaceOutputSignals* place_out, simples_without_net_EventOutputSignals* ev_out );
extern void force_simples_without_net_Marking( iopt_param_info fv[], simples_without_net_NetMarking* m );


extern void createInitial_simples_without_net_NetMarking( simples_without_net_NetMarking* init_marking );
extern void createEmpty_simples_without_net_NetMarking( simples_without_net_NetMarking* empty_marking );
extern void add_simples_without_net_NetMarkings( simples_without_net_NetMarking* dest_marking, simples_without_net_NetMarking* source_marking );

extern void init_simples_without_net_OutputSignals( simples_without_net_PlaceOutputSignals* place_out, simples_without_net_EventOutputSignals* ev_out );

/* Transition 7 - tr_7 */
extern int  t_7_enabled( simples_without_net_NetMarking* prev, simples_without_net_NetMarking* avail );
extern int  t_7_events( simples_without_net_InputSignalEvents* events );
extern int  t_7_guards( simples_without_net_NetMarking* marking, simples_without_net_InputSignals* inputs, simples_without_net_PlaceOutputSignals* place_out, simples_without_net_EventOutputSignals* ev_out );
extern void t_7_remove_marks( simples_without_net_NetMarking* marking );
extern void t_7_add_marks( simples_without_net_NetMarking* marking );
extern void t_7_generate_output_events( simples_without_net_OutputSignalEvents* ev_out );
/* Transition 9 - tr_9 */
extern int  t_9_enabled( simples_without_net_NetMarking* prev, simples_without_net_NetMarking* avail );
extern int  t_9_events( simples_without_net_InputSignalEvents* events );
extern int  t_9_guards( simples_without_net_NetMarking* marking, simples_without_net_InputSignals* inputs, simples_without_net_PlaceOutputSignals* place_out, simples_without_net_EventOutputSignals* ev_out );
extern void t_9_remove_marks( simples_without_net_NetMarking* marking );
extern void t_9_add_marks( simples_without_net_NetMarking* marking );
extern void t_9_generate_output_events( simples_without_net_OutputSignalEvents* ev_out );
extern void simples_without_net_GenerateInputSignalEvents( simples_without_net_InputSignals *old_values, simples_without_net_InputSignals *new_values, simples_without_net_InputSignalEvents *events );

extern void simples_without_net_GenerateEventOutputSignals( simples_without_net_OutputSignalEvents *events, simples_without_net_EventOutputSignals *signals );

extern void simples_without_net_GenerateTransitionActionOutputSignals( simples_without_net_TransitionFiring *tfired, simples_without_net_NetMarking *marking, simples_without_net_EventOutputSignals *signals );

extern void simples_without_net_GeneratePlaceOutputSignals( simples_without_net_NetMarking *marking, simples_without_net_InputSignals *inputs, simples_without_net_PlaceOutputSignals *place_out, simples_without_net_EventOutputSignals *ev_out );

extern void simples_without_net_ExecutionStep( simples_without_net_NetMarking *prev_marking, simples_without_net_InputSignals *inputs, simples_without_net_InputSignals *prev_in, simples_without_net_PlaceOutputSignals *place_out, simples_without_net_EventOutputSignals *ev_out );

extern void simples_without_net_InitializeIO();
extern void simples_without_net_GetInputSignals( simples_without_net_InputSignals* inputs, simples_without_net_InputSignalEvents* events );
extern void simples_without_net_PutOutputSignals( simples_without_net_PlaceOutputSignals* place_out, simples_without_net_EventOutputSignals* event_out, simples_without_net_OutputSignalEvents* events );
extern void simples_without_net_LoopDelay();
extern int simples_without_net_FinishExecution( simples_without_net_NetMarking* marking );

extern simples_without_net_NetMarking* get_simples_without_net_NetMarking();
extern simples_without_net_InputSignals* get_simples_without_net_InputSignals();
extern simples_without_net_PlaceOutputSignals* get_simples_without_net_PlaceOutputSignals();
extern simples_without_net_EventOutputSignals* get_simples_without_net_EventOutputSignals();
extern simples_without_net_TransitionFiring* get_simples_without_net_TransitionFiring();

#ifdef __cplusplus
};
#endif


#endif
