/* Net N_3carros_TD - IOPT */
/* Automatic code generated by IOPT2C XSLT transformation. */
/* Changed by IOPT2AC to run in Arduino */
/* Please fill the necessary code to perform hardware IO. */

#include <stdlib.h>
#include "net_types.h"

#include <Arduino.h>
#define ANALOG_IN_MAX  1023
#define ANALOG_OUT_MAX 255

//PYTHON - Initializations
#include <Wire.h>
#define I2C_ADDRESS_ME 0x1
#define I2C_ADDRESS_event71 0x3
#define I2C_ADDRESS_event73 0x3
#define I2C_ADDRESS_event114 0x2
#define I2C_ADDRESS_event115 0x2
String readString;
int event70_flag = 0;
int event72_flag = 0;
int event116_flag = 0;
int event117_flag = 0;
//PYTHON - End Initializations

//PYTHON - Receive Listener Function
void receiveI2C(int num) {
    readString = "";
    while (Wire.available() > 0) {
        delay(4);
        char c = Wire.read();
        readString += c;
    }
    if(readString == "event70") {
        event70_flag = 1;
    }    if(readString == "event72") {
        event72_flag = 1;
    }    if(readString == "event116") {
        event116_flag = 1;
    }    if(readString == "event117") {
        event117_flag = 1;
    }
}
//PYTHON - End Listener Function

/* Executed just once, before net execution starts: */
void N_3carros_TD_InitializeIO()
{
    //PYTHON - Initialize digital outputs
    pinMode(2, OUTPUT);
    digitalWrite(2, LOW);
    pinMode(3, OUTPUT);
    digitalWrite(3, LOW);
    pinMode(4, OUTPUT);
    digitalWrite(4, LOW);
    pinMode(5, OUTPUT);
    digitalWrite(5, LOW);
    pinMode(6, OUTPUT);
    digitalWrite(6, LOW);
    pinMode(7, OUTPUT);
    digitalWrite(7, LOW);
    pinMode(8, OUTPUT);
    digitalWrite(8, LOW);
    pinMode(9, OUTPUT);
    digitalWrite(9, LOW);
    pinMode(10, OUTPUT);
    digitalWrite(10, LOW);
    pinMode(11, OUTPUT);
    digitalWrite(11, LOW);
    pinMode(12, OUTPUT);
    digitalWrite(12, LOW);
    pinMode(13, OUTPUT);
    digitalWrite(13, LOW);
    //PYTHON - Initialize serial and i2c communications
    Serial.begin(9600);
    Wire.begin(I2C_ADDRESS_ME);
    //PYTHON - End serial and i2c initializations
}

/* Read all hardware input signals and fill data-structure */
void N_3carros_TD_GetInputSignals(
    N_3carros_TD_InputSignals* inputs,
    N_3carros_TD_InputSignalEvents* events )
{
    /* No Inputs*/

    if( events != NULL ) {
        // PYTHON - Change event state
        if (event70_flag) {
            events->event70 = 1;
            event70_flag = 0;
        } else {
            events->event70 = 0;
        }
        if (event72_flag) {
            events->event72 = 1;
            event72_flag = 0;
        } else {
            events->event72 = 0;
        }
        if (event116_flag) {
            events->event116 = 1;
            event116_flag = 0;
        } else {
            events->event116 = 0;
        }
        if (event117_flag) {
            events->event117 = 1;
            event117_flag = 0;
        } else {
            events->event117 = 0;
        }
        //PYTHON - End change event state
    }
}

/* Write all output values to physical hardware outputs */
void N_3carros_TD_PutOutputSignals(
    N_3carros_TD_PlaceOutputSignals* place_out,
    N_3carros_TD_EventOutputSignals* event_out,
    N_3carros_TD_OutputSignalEvents* events )
{
    //PYTHON - Digital write the outputs
    digitalWrite(2, place_out->car1_ready);
    digitalWrite(3, place_out->car1_arrived);
    digitalWrite(4, place_out->car5_ready);
    digitalWrite(5, place_out->car5_arrived);
    digitalWrite(6, place_out->car6_ready);
    digitalWrite(7, place_out->car6_arrived);
    //PYTHON - End digital write the outputs

    if( events != NULL ) {
        //PYTHON - Send communication
        if (events->event71) {
            Wire.beginTransmission(I2C_ADDRESS_event71);
            Wire.write("event71");
            Wire.endTransmission();
        }
        if (events->event73) {
            Wire.beginTransmission(I2C_ADDRESS_event73);
            Wire.write("event73");
            Wire.endTransmission();
        }
        if (events->event114) {
            Wire.beginTransmission(I2C_ADDRESS_event114);
            Wire.write("event114");
            Wire.endTransmission();
        }
        if (events->event115) {
            Wire.beginTransmission(I2C_ADDRESS_event115);
            Wire.write("event115");
            Wire.endTransmission();
        }
        //PYTHON - End send communication
    }

}

/* Delay between loop iterations to save CPU and power consumption */
void N_3carros_TD_LoopDelay()
{
    //PYTHON - Loop config
    delay(10);
    Serial.println("Loop 0x1");
    Wire.onReceive(receiveI2C);
    //PYTHON - End loop config
}

/* Must return 1 to finish net execution */
int N_3carros_TD_FinishExecution( N_3carros_TD_NetMarking* marking )
{
    return 0;
}