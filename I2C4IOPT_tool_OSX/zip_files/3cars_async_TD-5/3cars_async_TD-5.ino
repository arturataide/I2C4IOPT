/* Net N_3carros_TD - IOPT */
/* Automatic code generated by IOPT2C XSLT transformation. */


#include <stdlib.h>
#include "net_types.h"


int trace_control = TRACE_CONT_RUN;

extern void httpServer_init();
extern void httpServer_getRequest();
extern void httpServer_sendResponse();
extern void httpServer_disconnectClient();
extern void httpServer_checkBreakPoints();
extern void httpServer_finish();

static N_3carros_TD_NetMarking marking;
static N_3carros_TD_InputSignals inputs, prev_inputs;
static N_3carros_TD_PlaceOutputSignals place_out;
static N_3carros_TD_EventOutputSignals ev_out;

void setup()
{
    createInitial_N_3carros_TD_NetMarking( &marking );
    init_N_3carros_TD_OutputSignals( &place_out, &ev_out );
    N_3carros_TD_InitializeIO();
    N_3carros_TD_GetInputSignals( &prev_inputs, NULL );
#ifdef HTTP_SERVER
    httpServer_init();
#endif
}

void loop()
{
#ifdef HTTP_SERVER
    httpServer_getRequest();
#endif

    if( trace_control != TRACE_PAUSE )
        N_3carros_TD_ExecutionStep( &marking, &inputs, &prev_inputs, &place_out, &ev_out );
    else N_3carros_TD_GetInputSignals( &inputs, NULL );
    if( trace_control > TRACE_PAUSE ) --trace_control;

#ifdef HTTP_SERVER
    httpServer_sendResponse();
#endif

    N_3carros_TD_LoopDelay();

#ifdef HTTP_SERVER
    httpServer_disconnectClient();
    httpServer_checkBreakPoints();
#endif
}

#ifndef ARDUINO
int main()
{
    setup();

    do loop();
    while( N_3carros_TD_FinishExecution( &marking ) == 0 );

#ifdef HTTP_SERVER
    httpServer_finish();
#endif

    return 0;
}
#endif


N_3carros_TD_NetMarking* get_N_3carros_TD_NetMarking()
{
    return &marking;
}

N_3carros_TD_InputSignals* get_N_3carros_TD_InputSignals()
{
    return &inputs;
}

N_3carros_TD_PlaceOutputSignals* get_N_3carros_TD_PlaceOutputSignals()
{
    return &place_out;
}

N_3carros_TD_EventOutputSignals* get_N_3carros_TD_EventOutputSignals()
{
    return &ev_out;
}

